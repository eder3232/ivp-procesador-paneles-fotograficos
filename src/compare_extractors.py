"""
Comparador de Extractores de Im√°genes PDF
Compara el m√©todo original vs el m√©todo avanzado
"""

import os
import sys
from pathlib import Path

# Agregar el directorio src al path para importar m√≥dulos
sys.path.append(str(Path(__file__).parent))

from pdf_processor.image_extractor import ImageExtractor
from pdf_processor.advanced_image_extractor import AdvancedImageExtractor
from pdf_processor.page_separator import PDFPageSeparator
from utils.file_manager import FileManager


def compare_extractors():
    """
    Compara ambos m√©todos de extracci√≥n
    """
    print("üî¨ Comparando M√©todos de Extracci√≥n de Im√°genes...")

    # Configurar rutas
    input_pdf = "src/data/panel_fotografico_corregido_cabanaconde.pdf"
    temp_dir = "temp"
    output_original = "output/original_method"
    output_advanced = "output/advanced_method"

    # Verificar que el archivo PDF existe
    if not os.path.exists(input_pdf):
        print(f"‚ùå Error: No se encontr√≥ el archivo {input_pdf}")
        return

    try:
        # Paso 1: Separar p√°ginas con im√°genes
        print("üìÑ Paso 1: Separando p√°ginas con im√°genes...")
        separator = PDFPageSeparator()
        filtered_pdf_path = separator.filter_pages_with_images(input_pdf, temp_dir)

        if not filtered_pdf_path:
            print("‚ùå No se encontraron p√°ginas con im√°genes")
            return

        print(f"‚úÖ P√°ginas filtradas: {filtered_pdf_path}")

        # Paso 2: Probar m√©todo original
        print("\nüîÑ M√âTODO ORIGINAL (PyMuPDF)")
        print("=" * 50)

        original_extractor = ImageExtractor()
        if original_extractor.extract_images_from_pdf(
            filtered_pdf_path, output_original
        ):
            print("‚úÖ M√©todo original completado")
        else:
            print("‚ùå Error en m√©todo original")

        # Paso 3: Probar m√©todo avanzado
        print("\nüöÄ M√âTODO AVANZADO (pdf2image + OpenCV)")
        print("=" * 50)

        advanced_extractor = AdvancedImageExtractor()

        # Verificar dependencias
        if not advanced_extractor.check_dependencies():
            print("‚ùå Dependencias no disponibles para m√©todo avanzado")
            print("üí° Instalar con: pip install pdf2image opencv-python")
            print("   # En Windows tambi√©n necesitas poppler")
            return

        if advanced_extractor.extract_images_from_pdf(
            filtered_pdf_path, output_advanced
        ):
            print("‚úÖ M√©todo avanzado completado")
        else:
            print("‚ùå Error en m√©todo avanzado")

        # Paso 4: Comparar resultados
        print("\nüìä COMPARACI√ìN DE RESULTADOS")
        print("=" * 50)

        compare_results(output_original, output_advanced)

    except Exception as e:
        print(f"‚ùå Error durante la comparaci√≥n: {str(e)}")
        import traceback

        traceback.print_exc()
    finally:
        # Limpiar archivos temporales
        file_manager = FileManager()
        file_manager.cleanup_temp_files(temp_dir)


def compare_results(original_dir: str, advanced_dir: str):
    """
    Compara los resultados de ambos m√©todos

    Args:
        original_dir: Directorio con resultados del m√©todo original
        advanced_dir: Directorio con resultados del m√©todo avanzado
    """
    try:
        print(f"üìÅ M√©todo Original: {original_dir}")
        print(f"üìÅ M√©todo Avanzado: {advanced_dir}")

        # Contar archivos en cada directorio
        original_files = count_png_files(original_dir)
        advanced_files = count_png_files(advanced_dir)

        print(f"\nüìà Estad√≠sticas:")
        print(f"   M√©todo Original: {original_files} archivos PNG")
        print(f"   M√©todo Avanzado: {advanced_files} archivos PNG")

        # Comparar estructura de carpetas
        print(f"\nüìÇ Estructura de carpetas:")
        print(f"   M√©todo Original: {count_directories(original_dir)} carpetas")
        print(f"   M√©todo Avanzado: {count_directories(advanced_dir)} carpetas")

        # Verificar si las im√°genes tienen el mismo tama√±o
        print(f"\nüîç Comparando tama√±os de im√°genes...")
        compare_image_sizes(original_dir, advanced_dir)

    except Exception as e:
        print(f"‚ùå Error comparando resultados: {e}")


def count_png_files(directory: str) -> int:
    """Cuenta archivos PNG en un directorio"""
    count = 0
    if os.path.exists(directory):
        for root, dirs, files in os.walk(directory):
            for file in files:
                if file.endswith(".png"):
                    count += 1
    return count


def count_directories(directory: str) -> int:
    """Cuenta subdirectorios en un directorio"""
    count = 0
    if os.path.exists(directory):
        for root, dirs, files in os.walk(directory):
            count += len(dirs)
    return count


def compare_image_sizes(original_dir: str, advanced_dir: str):
    """Compara tama√±os de im√°genes entre ambos m√©todos"""
    try:
        from PIL import Image

        # Obtener tama√±os de im√°genes del m√©todo original
        original_sizes = get_image_sizes(original_dir)
        advanced_sizes = get_image_sizes(advanced_dir)

        print(f"   M√©todo Original - Tama√±os: {original_sizes}")
        print(f"   M√©todo Avanzado - Tama√±os: {advanced_sizes}")

        # Verificar si los tama√±os son similares
        if original_sizes and advanced_sizes:
            if len(original_sizes) == len(advanced_sizes):
                print("   ‚úÖ Ambos m√©todos extrajeron la misma cantidad de im√°genes")
            else:
                print("   ‚ö†Ô∏è Diferente cantidad de im√°genes extra√≠das")

    except ImportError:
        print("   ‚ö†Ô∏è PIL no disponible para comparar tama√±os")
    except Exception as e:
        print(f"   ‚ùå Error comparando tama√±os: {e}")


def get_image_sizes(directory: str) -> list:
    """Obtiene tama√±os de im√°genes en un directorio"""
    sizes = []
    if os.path.exists(directory):
        for root, dirs, files in os.walk(directory):
            for file in files:
                if file.endswith(".png"):
                    try:
                        from PIL import Image

                        img_path = os.path.join(root, file)
                        with Image.open(img_path) as img:
                            sizes.append(img.size)
                    except:
                        pass
    return sizes


if __name__ == "__main__":
    compare_extractors()
